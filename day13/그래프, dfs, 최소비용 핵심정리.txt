★그래프-클래스, 초기화(개선방안), 출력
class Graph():
	def __init__(self, size):
		self.SIZE =size
		self.graph = [[0 for _ in range(size)] for _ in range(size)]

def printGraph(g):
	for i in nameAry:
		print(i, end=' ')
	print()
	
	for i in range(5):
		print(nameAry[i], end= ' ')
		for j in range(5):
			print(g.graph[i][j], end= ' ')
		print()


G =Graph(5)
nameAry =['유나','채령','류진','예지','리아']
유나, 채령, 류진, 예지, 리아 = 0,1,2,3,4

*방향, 무방향 고려해서
G.graph[유나][채령] = 1


★DFS -반복문
def dfs(g):
	stack = []
	visitAry = []
	
	curr = 0
	stack.append(curr)
	visitAry.append(curr)
		
	while len(stack) !=0 : # 0이면 다 순회했음을 의미
		next = None
		for v in range(5):
			if g.graph[curr][v] == 1  :
				if v in visitAry :
					continue
				else :
					next = v
					break
		if next != None :
			curr =next
			stack.append(curr)
			visitAry .append(curr)
		else :
			curr = stack.pop()

★최소비용-(가중치, 시작, 끝)으로 묶은 리스트/정렬/중복제거/간선제거
init_list =[]
for row in range(6):
	for col in range(6):
		if g.graph[row][col] !=0 :
			init_list.append((g.graph[row][col],row, col))

from operator import itemgetter 
init_list_sorted = sorted(init_list, key = itemgetter(0), reverse =True)
final_list =[]
for i in range(0, len(init_list_sorted), 2):
	final_list.append(init_list_sorted[i])

def dfs(g, findValue):
 		
	동일(g.graph[curr][v] !=0)
	if findValue in visitAry :
		return True
	else :
		return False

index = 0
while len(final_list) > 6-1 :
	start = final_list[index][1]
	final = final_list[index][2]
	saveW= final_list[index][0]
	
	g.graph[start][final]=0
	g.graph[final][start]=0

	if dfs(g, start) and dfs(g, final) :
		del(final_list[index])
	else :
		g.graph[start][final]=saveW
		g.graph[final][start] =saveW
		index +=1
printGraph(G)